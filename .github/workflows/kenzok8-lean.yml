#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: kenzo
#=================================================

name: kenzok8-Lean

on:
  push:
    branches: 
      - master
  #schedule:
  #  - cron: 0 0 1 * *
  #watch:
   # types: started
   # branches:
   #   - master

env:
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  PASSWORD: ${{ secrets.PASSWORD }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
  DOCKER_ID: ${{ secrets.DOCKER_ID }}
  DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}  
  TZ: Asia/Shanghai

jobs:
  merge:
    runs-on: Ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [Lean]
    
    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
    
    - name: 检查
      uses: actions/checkout@v3.1.0

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
        
    - name: 设置当前的日期
      id: date
      run: |
        echo "date=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%H')" >> $GITHUB_ENV
        echo "DOCKERTAG=${{ secrets.DOCKER_ID }}/openwrt-6p:latest" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV
        
    - name: 克隆源代码
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default
        #git clone --depth 1 https://github.com/kenzok8/openwrt-packages -b $REPO_BRANCH package/openwrt-packages

    - name: 更新 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 克隆预设置
      env: 
          REPO_URL: https://github.com/weiwuji1/we
          REPO_BRANCH: master
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH we
      
    - name: 自定义配置 ${{matrix.target}}
      env:
        CONFIG_FILE: '${{matrix.target}}.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt
        cp -f ../we/default-settings package/lean/default-settings/files/zzz-default-settings
        sed -i 's/v$date1/Nov/g' package/lean/default-settings/files/zzz-default-settings
        cp -f feeds/smpackage/.github/diy/banner package/base-files/files/etc/banner
        sed -i 's/%D %V, %C/openwrt Nov by Wei/g' package/base-files/files/etc/banner
        cp -f feeds/smpackage/.github/diy/index_x86.htm package/lean/autocore/files/x86/index.htm
        sed -i 's/luci-theme-bootstrap/luci-theme-atmaterial_brown/g' feeds/luci/collections/luci/Makefile
        cp -f ../we/${{matrix.target}}.config .config && make defconfig
        
    - name: 下载包文件
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ matrix.target }}
        clean: ${{ contains(github.event.action, 'nocache') }}
        prefix: ${{ github.workspace }}/openwrt
    
    - name: Check space usage
      run: |
        shopt -s extglob
        cd openwrt
        if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
            rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
        fi
        df -hT

    - name: 编译固件
      working-directory: ./openwrt
      run: |
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"
     
    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 整理固件
      working-directory: ./openwrt
      run: |
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/package
        mkdir -p ./artifact/buildinfo
        rm -rf $(find ./bin/targets/ -type d -name "packages")
        cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
        cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
        #cp -rf $(find ./bin/packages/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/ 
      # rm -rf ./artifact/
        #mkdir -p ./artifact/
        #find bin/targets/ -name "*sysupgrade*bin*" | xargs -i mv -f {} ./artifact/
        #find bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ./artifact/
        #find bin/targets/ -name "*rootfs*tar*" | xargs -i mv -f {} ./artifact/
        #find bin/packages/ -type d -name "x86_64" | xargs -i mv -f {} ./artifact/
          
   # - name : 上传固件目录
      #uses: actions/upload-artifact@master
        #with:
          #name: OpenWrt_firmware
          #path: ./artifact/
          
    #- name: Deliver buildinfo
        #uses: actions/upload-artifact@master
        #with:
          #name: OpenWrt_buildinfo
          #path: ./openwrt/artifact/buildinfo/

    - name: 上传IPK包
      uses: actions/upload-artifact@master
      with:
          name: OpenWrt_package
          path: ./openwrt/artifact/firmware/

    - name: 上传固件包
      uses: actions/upload-artifact@master
      with:
          name: OpenWrt_firmware
          path: ./openwrt/artifact/package/
        
